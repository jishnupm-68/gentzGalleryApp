<%- include('../partials/admin/header.ejs') %>

<head>
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
</head>

<style>
   .error-message{
       color: red;
   }
    .thumbnails-container {
        display: flex;
        overflow-x: auto;
    }
    .thumbnail {
        margin-right: 10px;
    }
    #imgView1, #imgView2, #imgView3, #imgView4{
        max-width: 100%;    
        max-height: 400px;  
        object-fit: contain; 
    }
    #croppedImg1,#croppedImg2, #croppedImg4,#croppedImg4{ 
        position: relative;   
        max-width: 100%;      
        max-height: 400px;    
        overflow: hidden;    
        margin: auto;         
    }

</style>
   <section class="content-main" style="margin-left: 20%;">
       <div class="row col-12 d-flex justify-content-between align-items-center">
           <div class="col-9">
               <div class="content-header">
                   <h2 class="content-title" >Add New Product</h2>
               </div>
           </div>
           <div class="col-lg-12">
               <div class="card mb-4 col-9">
                   <div class="card-body">
                       <form method="post" action="#" enctype="multipart/form-data"
                           onsubmit="return validateForm()" id="addProductForm">
                           <div class="mb-4">
                               <label for="product_name" class="form-label">Product Name</label>
                               <input type="text" placeholder="Type here" name="productName"
                                   class="form-control border" id="product_name">
                               <div id="productName-error" class="error-message"></div>
                               <% if(locals.message){ %>
                                <div class="error-message"> <%= locals.message %></div>
                               <% } %>
                           </div>
                           <div class="col-lg-4 mb-4">
                               <label class="form-label">Brand</label>
                               <select class="form-select border" name="brand">                                   
                                <% for (let i = 0; i < brand.length; i++) { %>                               
                                       <option value="<%= brand[i].brandName %>">
                                        <%= brand[i].brandName %>                                        
                                       </option>
                                     <% } %>                                       
                               </select>
                               <div id="brand-error" class="error-message"></div>
                           </div>
                           <div class="mb-4">
                               <label class="form-label">Full description</label>
                               <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border"
                                   rows="4"></textarea>
                               <div id="description-error" class="error-message"></div>
                           </div>
                           <div class="row">
                               <div class="col-lg-4">
                                   <div class="mb-4">
                                       <label class="form-label">Regular price</label>
                                       <input placeholder="$" name="regularPrice" type="text"
                                           class="form-control border">
                                           <div id="regularPrice-error" class="error-message"></div>
                                   </div>
                               </div>
                               <div class="col-lg-4">
                                   <div class="mb-4">
                                       <label class="form-label">Sale price</label>
                                       <input placeholder="$" name="salePrice" type="text" class="form-control border">
                                      
                                   </div>
                                   <div id="salePrice-error" class="error-message"></div>
                               </div>
                               <div class="col-lg-4">
                                   <div class="mb-4">
                                       <label class="form-label">Stock</label>
                                       <input placeholder="" name="quantity" type="text" class="form-control border">
                                       <div id="quantity-error" class="error-message"></div>
                                   </div>
                               </div>
                           </div>
                           <div class="row">
                              
                               <div class="col-lg-4">
                                   <div class="mb-4">
                                       <label class="form-label">Color</label>
                                       <input  name="color" type="text" class="form-control border">
                                   </div>
                                   <div id="color-error" class="error-message"></div>
                               </div>
                            
                           </div>
                           <div class="card mb-4">
                               <div class="card-body">
                                   <div class="row gx-2">
                                       <div class="col-sm-6 mb-3">
                                           <label class="form-label">Category</label>
                                           <select class="form-select border" style="width: 150px;" name="category">
                                            <% for (let i = 0; i < cat.length; i++) { %>                           
                                                    <option value="<%= cat[i].name %>">
                                                        <%= cat[i].name %>                                       
                                                    </option>
                                            <% } %>
                                           </select>
                                           <div id="category-error" class="error-message"></div>
                                       </div>
                                   </div>
                               </div>
                           </div>
                           <div class="card mb-2">
                               <div class="card-header">
                                   <h4>Choose images</h4>
                               </div>
                               <div class="border row">
                                   <div id="addedImagesContainer" class="thumbnails-container"></div>
                               </div>
                               <div class="row">
                                   <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                       <img src="" alt="" id="imgView1">

                                            <input class="form-control" type="file" name="images" id="input1"
                                                accept="image/png, image/jpeg, image/jpg"
                                                onchange="viewImage1(event), viewImage(event, 1), validateImage(this)">
                                                <div id="images-error" class="error-message"></div>
                                        </div>
                                        <div class="image-cropper d-flex align-items-center ml-3"
                                            style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                            <img src="" id="croppedImg1" alt="">
                                            <button type="button" id="saveButton1" class="btn-sm btn-primary">Save</button>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                            <img src="" alt="" id="imgView2">
                                            <input class="form-control" type="file" name="images" id="input2"
                                                accept="image/png, image/jpeg, image/jpg"
                                                onchange="viewImage2(event),viewImage(event, 2), validateImage(this)">
                                        </div>
                                        <div class="image-cropper d-flex align-items-center ml-3"
                                            style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                            <img src="" id="croppedImg2" alt="">
                                            <button type="button" id="saveButton2" class="btn-sm btn-primary">Save</button>
                                        </div>
                                    </div>
                                    
                                    <div class="row">
                                        <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                            <img src="" alt="" id="imgView4">
                                            <input class="form-control" type="file" name="images" id="input4"
                                                accept="image/png, image/jpeg, image/jpg"
                                                onchange="viewImage4(event),viewImage(event, 4), validateImage(this)">
                                        </div>
                                        <div class="image-cropper d-flex align-items-center ml-3"
                                            style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                            <img src="" id="croppedImg4" alt="">
                                            <button type="button" id="saveButton4" class="btn-sm btn-primary ">Save</button>
                                        </div>
                                    </div>
                                </div>
                           </div>
                           <div>
                               <button class="btn btn-md rounded font-sm hover-up"  type="button" onclick="validateAndSubmit()">Add new Product</button>
                           </div>
                       </form>
                   </div>
               </div>
           </div>  
   </section>

<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>


<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>


 
<!-- script for adding new product and related validation  -->
<script>
    //function for validating and ajax request for adding new product
    function validateAndSubmit(){
        if(validateForm()){
            $.ajax({
                url: '/admin/addProducts',
                type: 'POST',
                data: new FormData(document.getElementById('addProductForm')),
                enctype:"multipart/form-data",
                contentType: false,
                processData: false,
                success: function(response) {
                    if(response.success){
                        Swal.fire({
                            icon:'success',
                            title: 'Product added successfully!',
                            showConfirmButton: false,
                            timer: 3500
                        })
                        window.location.href = '/admin/products';
                        
                    }else{
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: response.message
                        });
                    }
                },
            })
        }
    }

    //function for validating the image before submitting
    function validateImage(input) {
    const file = input.files[0];
    if (!file) {
       Swal.fire({
           icon: 'error',
           title: 'Error',
           text: 'Please select an image file!',
       })
        return;
    }
    //image types
    const allowedTypes = ["image/jpeg", "image/png", "image/jpg", "image/webp"];
    if (!allowedTypes.includes(file.type)) {
      Swal.fire({
        icon: 'error',
        title: 'Error...',
        text: 'Invalid image type! Only JPEG, PNG, JPG, and WebP are allowed.',
      })
        input.value = ""; 
        return;
    }
    if (file.size > 2 * 1024 * 1024) { 
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'File size is too large! Please select an image under 2MB.',
        })
        input.value = ""; 
        return;
    }
    console.log("Valid image selected:", file.name);
}


    function viewImage1(event){
        document.getElementById("imgView1").src = URL.createObjectURL(event.target.files[0])
    }
    function viewImage2(event){
        document.getElementById("imgView2").src = URL.createObjectURL(event.target.files[0])
    }
    function viewImage3(event){
        document.getElementById("imgView3").src = URL.createObjectURL(event.target.files[0])
    }
    function viewImage4(event){
        document.getElementById("imgView4").src = URL.createObjectURL(event.target.files[0])
    }

    //function for cropping and zooming
    function viewImage(event, index) {
        let input = event.target;
        let reader = new FileReader();
        reader.onload= function (){
            let dataURL = reader.result;
            let image = document.getElementById("imgView"+index);
            let src =dataURL;
            let cropper = new Cropper(image,{
                aspectRatio :1,
                viewMode:1,
                guides:true,
                background:false,
                autoCropArea:1,
                zoomable:true,
            });

            let cropperContainer = document.querySelector("#croppedImg"+index).parentNode;
            cropperContainer.style.display = "block";
            let saveButton = document.querySelector("#saveButton"+index);
            saveButton.addEventListener("click", async function () {
                let croppedCanvas = cropper.getCroppedCanvas();
                let croppedImage = document.getElementById('croppedImg'+index);
                croppedImage.src = croppedCanvas.toDataURL('image/jpeg',1.0);
                let timeStamp = new Date().getTime();
                let fileName = "cropped-img-${timeStamp}-${index}.png"
                await croppedCanvas.toBlob(blob=>{
                    let input = document.getElementById('input1'+'blob');
                    let imgFile = new File([blob],fileName,blob);
                    const fileList = new DataTransfer();
                    fileList.items.add(imgFile);
                    input.files = fileList.files
                })
                cropperContainer.style.display = "none";
                cropper.destroy();   
            })
        }
        reader.readAsDataURL(input.files[0]);
    }

    const selectedImages = [] ;
    document.getElementById('input1').addEventListener("change",handleFileSelect);

    //handling the images
    function handleFileSelect(event){
        const addedImagesContainer = document.getElementById('addedImagesContainer');
        addedImagesContainer.innerHTML = '';
        const files = event.target.files;

        for(let i=0;i<files.length;i++){
            const file = files[i];
            selectedImages.push(file);
            const thumbnail = document.createElement('div');
            thumbnail.classList.add('thumbnail');

            const img =document.createElement('img');
            img.src = URL.createObjectURL(file);
            img.alt = "thumbnail";
            img.style.width ="50px";
            img.style.height ="auto";
            const removeIcon  = document.createElement('span');
            removeIcon.classList.add('remove-icon');
            removeIcon.innerHTML = '&times;';
            removeIcon.addEventListener("click",function(){
                const index=  selectedImages.indexOf(file);
                if(index!=-1){
                    selectedImages.splice(index,1);
                }
                thumbnail.remove();
            })
            thumbnail.appendChild(img);
            thumbnail.appendChild(removeIcon);
            addedImagesContainer.appendChild(thumbnail);
        }
    }

    //function for validating the form
    function validateForm() {
        clearErrorMessages();
        const name = document.getElementsByName('productName')[0].value;
        const description = document.getElementById('descriptionid').value;
        const brand = document.getElementsByName('brand')[0].value;
        const price = document.getElementsByName('regularPrice')[0].value;
        const saleprice = document.getElementsByName('salePrice')[0].value;
        const color = document.getElementsByName('color')[0].value;
        const category = document.getElementsByName('category')[0].value;
        const images = document.getElementById('input1')
        const quantity=document.getElementsByName('quantity')
        let isValid = true
        if (name.trim() === "") {
            displayErrorMessage('productName-error', 'Please enter a product name.');
            isValid = false;
        } else if (!/^[a-zA-Z\s]+$/.test(name.trim())) {
            displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters.');
            isValid = false;
        }        
        if (description.trim() === "") {
            displayErrorMessage('description-error', 'Please enter a product description.');
            isValid = false;
            }
        if ( parseInt(quantity) < 0) {
            displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
            isValid = false;
        }
        if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
            displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
            isValid = false;
        }
        if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
            displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
            isValid = false;
        }
        if (parseFloat(price) <= parseFloat(saleprice)) {
        displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
        isValid = false;
        }
        if (color.trim() === "") {
            displayErrorMessage('color-error', 'Please enter a color.');
            isValid = false;
        }
        if (images.files.length === 0) {
            displayErrorMessage("images-error",'Please select an image.');
            isValid = false;
        }
        return isValid;
    }

    //function for displaying the error message
    function displayErrorMessage(elementId, message) {
        var errorElement = document.getElementById(elementId);
        errorElement.innerText = message;
        errorElement.style.display = "block";
    }

    //function for clearing the error message
    function clearErrorMessages() {
                const errorElements = document.getElementsByClassName('error-message');
                Array.from(errorElements).forEach(element => {
                    element.innerText = '';
                });
                const errorMessage = document.getElementById('errorMessage');
    
    
            }

</script>


<%- include('../partials/admin/footer.ejs') %>


