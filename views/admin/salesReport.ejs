<%- include("../../views/partials/admin/header") %>

<style>
  .pagination {
    display: flex;
    justify-content: center;
  }

  .btn {
    /* Add your button styling here */
    margin: 0 5px;
    padding: 5px 10px;
    background-color: #f0f0f0;
    border: 1px solid #ccc;
    text-decoration: none;
    color: #333;
  }

  .active {

    color: #969090;
  }

  .btn:hover {
    /* Add styles for button hover state */
    background-color: #c0bcbc;
  }

  .table-spacing th,
  .table-spacing td {
    padding-left: 80px; 
  }
</style>

<main>
  <section class="container " style="margin-left: 20%; padding-top: 5%;">
    <div class="content-header row">
      <div class="d-flex justify-content-between align-items-center">
        <h2 class="content-title card-title">Sales Report</h2>
      </div>
    </div>
    
    <div class="card mb-4">
      <header class="card-header">
        <div class="row gx-3">
          <div class="col-lg-2 col-6 col-md-3">
            <select class="form-select" onchange="location.href='/admin/salesReport?day=' + this.value">
              <option value="salesToday" <%= filter === 'salesToday' ? 'selected' : '' %>>salesToday</option>
              <option value="salesWeekly" <%= filter === 'salesWeekly' ? 'selected' : '' %>>salesWeekly</option>
              <option value="salesMonthly" <%= filter === 'salesMonthly' ? 'selected' : '' %>>salesMonthly</option>
              <option value="salesYearly" <%= filter === 'salesYearly' ? 'selected' : '' %>>salesYearly</option>
            </select>             
          </div>
          <div class="col-md-2 col-6">
            <label for="startDate">Start Date:</label>
        <input type="date" id="startDate" value="<%=startDate %>">
        <label for="endDate">End Date:</label>
        <input type="date" id="endDate" value="<%=endDate %>">
        <button id="filterButton" class="btn btn-primary text-light mt-1">Filter</button>
          </div>
          <div class="col-lg-6 col-md-6 ms-auto text-md-end">
            <a href="" id="createSalesReport" class="btn btn-primary  text-light mb-2"
              >Generate PDF</a
            >
            <a href="" id="downloadExcelReport" class="btn btn-primary text-light mb-2"
              >Download Excel</a
            >
            <a href="" id="downloadSummary" class="btn btn-primary text-light mb-2"
              >Download Summary</a
            >
          </div>
        </div>
      </header>
    </div>
    
    <div class="right mt-5 container">
      <table id="salesTable" class="table table-hover">
        <thead>
          <tr>
            <th>#</th>
            <th>data ID</th>
            <th scope="col">Name</th>
            <th scope="col">Product</th>
            <th scope="col">Date</th>
            <th scope="col">Payment</th>
            <th scope="col">Status</th>
            <th scope="col" class="text-end">Total Price</th>
          </tr>
        </thead>
        
        <% if(data && data.length>0) {%>
        <tbody>
          <% for (let i = 0; i < data.length; i++) { %>
            <% data[i].orderedItems.forEach((item)=>{ %>
          <tr>
            <td><%= i + 1 %></td>
            <td><%= data[i]._id %></td>
            <td><b><%= data[i].userId.name %></b></td>           
            <td><b><%= item.productName %></b></td>
            <td><%= data[i].createdOn.toLocaleString('en-IN') %></td>
            <td><%= data[i].payment %></td>           
            <td><%= data[i].status %></td>           
            <td class="text-end"><%= data[i].finalAmount %></td>         
          </tr> 
          <%}) %>
         <% } %>       
        </tbody>
        <%}else{%>
          <tr>
            <td colspan="8" class="text-center">No sales data found.</td>
          </tr>
        <%}%>  
      </table>

      <!-- pagination -->
      <% if (totalPages) { %>
        <div class="pagination">
          <% if (currentPage > 1) { %>
            <button class="btn btn-sm">
              <a class="ajax-pagination" href="?page=<%= currentPage - 1 %>" data-page="<%= currentPage - 1 %>">Previous</a>
            </button>
          <% } %>
      
          <% for (let i = 1; i <= totalPages; i++) { %>
            <button class="btn btn-sm <%= i === currentPage ? 'active' : '' %>">
              <a class="ajax-pagination" href="?page=<%= i %>" data-page="<%= i %>"><%= i %></a>
            </button>
          <% } %>
      
          <% if (currentPage < totalPages) { %>
            <button class="btn btn-sm">
              <a class="ajax-pagination" href="?page=<%= currentPage + 1 %>" data-page="<%= currentPage + 1 %>">Next</a>
            </button>
          <% } %>
        </div>
      <% } %>
      </div>
  </section>
</main>

<input type="text" hidden value="<%= data %>" id = "data">
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

<!-- script for pagination filter and dynamically updating the table -->
  <script>
    // Pagination Click Event
    $(document).ready(function() {
    $(document).on("click", ".ajax-pagination", function(e) {
        e.preventDefault();
        let page = $(this).data("page");
        updateQueryParam("page", page); 
    });

    // Filter Click Event
    $(document).on("click", ".ajax-filter", function(e) {
        e.preventDefault();
        let filterType = $(this).data("filter");
        let filterValue = $(this).data("value");
        updateQueryParam(filterType, filterValue, true); 
    });

    // Function to Update URL and Fetch Data
    function updateQueryParam(key, value, resetPage = false) {
        let params = new URLSearchParams(window.location.search);
        params.set(key, value);
        if (resetPage) params.delete("page");
        let finalUrl = `/admin/salesReport?${params.toString()}`;
        window.history.pushState({}, "", finalUrl); // updating browser url without reload
        fetchSalesData(finalUrl);
    }

    // Function to Fetch Sales Data using AJAX
    function fetchSalesData(url) {
        $.ajax({
            url: url,
            method: "GET",
            dataType: "html",
            success: function(response) {
                let newTableContent = $(response).find("#salesTable tbody").html();
                let newPagination = $(response).find(".pagination").html();
                $("#salesTable tbody").html(newTableContent); // Update Sales Data Table
                $(".pagination").html(newPagination); // Update Pagination
            },
            error: function(xhr, status, error) {
                console.error("AJAX Error:", xhr.responseText, status, error);
            }
        });
    }
});
</script>
    

  <!-- script for filter using custom date and validation -->
  <script>
    document.getElementById('filterButton').addEventListener('click', async () => {
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;

    if (!startDate || !endDate) {
        Swal.fire({
          title: 'Error',
          text: 'Please select both start and end dates.',
          icon: 'error',
        })
        return;
    }
    try {
        window.location.href = `/admin/sales?startDate=${startDate}&endDate=${endDate}`
    } catch (error) {
        console.error('Error fetching orders:', error);
        Swal.fire({
          title: 'Error',
          text: 'An error occurred while fetching orders.',
          icon: 'error',
        })
    }
});

function displayResults(orders) {
    const resultsContainer = document.getElementById('results');
    resultsContainer.innerHTML = '';

    if (orders.length === 0) {
        resultsContainer.innerHTML = '<p>No orders found within the specified date range.</p>';
        return;
    }

    const ul = document.createElement('ul');
    orders.forEach(order => {
        const li = document.createElement('li');
        li.textContent = `Order ID: ${order._id}, Total Price: ${order.totalPrice}, Created On: ${new Date(order.createdOn).toLocaleDateString()}`;
        ul.appendChild(li);
    });
    resultsContainer.appendChild(ul);
}
  </script>

  <!-- script for downloading sales report in PDF -->
  <script>
    // code  for creating sales report
    document
      .getElementById("createSalesReport")
      .addEventListener("click", async (event) => {
        event.preventDefault();
        const dataElement = document.getElementById("data");
        const data = dataElement.value;
        const salesTable = document.getElementById("salesTable");
        const tableBody = salesTable.querySelector("tbody");

        const salesData = [];
        let grandTotal = 0; // Initialize grand total

        for (const row of tableBody.rows) {
          const dataId = row.cells[1].textContent.trim();
          const name = row.cells[2].textContent;
          const date = row.cells[4].textContent;
          let totalAmount = row.cells[7].textContent.trim();
          totalAmount = parseFloat(totalAmount.replace(/[^0-9]/g, ""), 10);
          grandTotal += totalAmount; // Accumulate totalAmount for grand total

          const dataData = {
            dataId: dataId,
            name: name,
            date: date,
            totalAmount: totalAmount,
          };

          salesData.push(dataData);
        }

        // Include grand total in sales data
        const grandTotalData = {
          dataId: "Grand Total",
          name: "",
          date: "",
          totalAmount: grandTotal,
        };
        salesData.push(grandTotalData);

        try {
          const response = await fetch("/admin/generatePdf", {
            method: "post",
            headers: {
              "Content-Type": "application/json",
            },
            // body:data,
            body: JSON.stringify(salesData),
          });

          if (response.ok) {
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = "report.pdf";
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
          } else {
            console.error("Failed to generate PDF");
          }
        } catch (error) {
          console.log(error.message);
        }
      });

      // code for download excel report
    document
      .getElementById("downloadExcelReport")
      .addEventListener("click", async (event) => {
        event.preventDefault();
        const salesTable = document.getElementById("salesTable");
        const tableBody = salesTable.querySelector("tbody");

        const salesData = [];
        let grandTotal = 0; // Initialize grand total

        for (const row of tableBody.rows) {
          const orderId = row.cells[1].textContent;
          const name = row.cells[2].textContent;
          const date = row.cells[4].textContent;
          const payment = row.cells[5].textContent;
          let totalAmount = row.cells[7].textContent.trim();
          totalAmount = parseFloat(totalAmount.replace(/[^0-9]/g, ""), 10);
          grandTotal += totalAmount; // Accumulate totalAmount for grand total

          const dataData = {
            orderId: orderId,
            name: name,
            date: date,
            totalAmount: totalAmount,
            payment: payment,
          };

          salesData.push(dataData);
        }

        // Include grand total in sales data
        const grandTotalData = {
          orderId: "Grand Total",
          name: "",
          date: "",
          totalAmount: grandTotal,
          payment: "",
        };
        salesData.push(grandTotalData);

        try {
          const response = await fetch("/admin/downloadExcel", {
            method: "post",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(salesData),
          });

          if (response.ok) {
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = "report.xlsx";
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
          } else {
            console.error("Failed to download Excel file");
          }
        } catch (error) {
          console.log(error.message);
        }
      });

      // code for download summary report
      document
      .getElementById("downloadSummary")
      .addEventListener("click", async (event) => {
        event.preventDefault();
        

        try {
          const response = await fetch("/admin/salesSummary", {
            method: "get",
          });

          if (response.ok) {
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = "report.pdf";
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
          } else {
            console.error("Failed to generate PDF");
          }
        } catch (error) {
          console.log(error.message);
        }
      });
  </script>

<%- include("../../views/partials/admin/footer") %>

